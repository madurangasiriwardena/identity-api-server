openapi: 3.0.0
info:
  description: >-
    This is the RESTful API for managing identity governance configurations in WSO2 Identity Server. These configurations are grouped in to main 5 categories.
      * Password Policies
      * Login Policies
      * Account Management Policies
      * Consent Management
      * Analytics Engine

    Each category will have sub categories which are called connectors and properties of connectors as mentioned below. <br>    <br>
    **Password Policies**
      * Password History
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Password History Feature   | passwordHistory.enable   | Enable to disallow previously used passwords |
        | Password History validation count   | passwordHistory.count   | Restrict reusing last x number of password during password update |
      * Password Patterns
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Password Policy Feature   | passwordPolicy.enable   | Enable password pattern policy |
        | Password Policy Min Length   | passwordPolicy.min.length   | Minumum length of the password |
        | Password Policy Max Length   | passwordPolicy.max.length   | Maximum length of the password |
        | Password Policy Pattern   | passwordPolicy.pattern   | Allowed password regex pattern |
        | Password Policy Error Message   | passwordPolicy.errorMsg   | Error message for invalid password patterns |

    <br>
    **Login Policies**
      * Account Locking
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Account Lock Enabled   | account.lock.handler.enable   | Enable account locking for failed logins |
        | Maximum Failed Login Attempts   | account.lock.handler.On.Failure.Max.Attempts   | Number of failed attempts allows without locking the account |
        | Account Unlock Time   | account.lock.handler.Time   | Account locked time span in minutes |
        | Lock Timeout Increment Factor   | account.lock.handler.login.fail.timeout.ratio   |  |
        | Internal Notification Management   | account.lock.handler.notification.manageInternally   | Error message for invalid password patterns |
      * Account Disabling
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Account Disabling   | account.disable.handler.enable   | Enable account disable Feature |
        | Internal Notification Management   | account.disable.handler.notification.manageInternally   | Set false if the client application handles notification sending |
      * Captcha for SSO Login
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable captcha always   | sso.login.recaptcha.enable.always   | Enable captcha verification always during SSO login |
        | Enable captcha after the Max failed attempts   | sso.login.recaptcha.enable   | Enable captcha verification during SSO login after allowed number of failed attempts |
        | Max failed attempts   | sso.login.recaptcha.on.max.failed.attempts   | Number of failed attempts allows without showing the captcha |

    <br>
    **Account Management Policies**
      * Lock Idle Accounts
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable   | suspension.notification.enable   |  |
        | Lock Account After (days)   | suspension.notification.account.disable.delay   |  |
        | Alert Users before account locking in days (comma-separated list)   | suspension.notification.delays   |  |
      * Account Recovery
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Notification Based Password Recovery   | Recovery.Notification.Password.Enable   |  |
        | Enable reCaptcha for Password Recovery   | Recovery.ReCaptcha.Password.Enable   |  |
        | Enable Security Question Based Password Recovery   | Recovery.Question.Password.Enable   |  |
        | Number Of Questions Required For Password Recovery   | Recovery.Question.Password.MinAnswers   |  |
        | Enable reCaptcha for Security Questions Based Password Recovery   | Recovery.Question.Password.ReCaptcha.Enable   | Show captcha for challenge question based password recovery |
        | Max Failed Attempts for ReCaptcha   | Recovery.Question.Password.ReCaptcha.MaxFailedAttempts   |  |
        | Enable Username Recovery   | Recovery.Notification.Username.Enable   |  |
        | Enable reCaptcha for Username Recovery   |  Recovery.ReCaptcha.Username.Enable  |  |
        | Enable Internal Notification Management   | Recovery.Notification.InternallyManage  | Set false if the client application handles notification sending |
        | Notify when Recovery Success   | Recovery.NotifySuccess   |  |
        | Notify when Questions Based Recovery Starts   | Recovery.Question.Password.NotifyStart   |  |
        | Recovery Link Expiry Time   | Recovery.ExpiryTime   |  |
        | Enable forced challenge questions   | Recovery.Question.Password.Forced.Enable   | Force users to provide answers to challenge questions during sign in |
        | Recovery callback URL regex   | Recovery.CallbackRegex   |  |
      * User Self Registration
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Self User Registration  | SelfRegistration.Enable  | Enable self user registration |
        | Enable Account Lock On Creation | SelfRegistration.LockOnCreation  | Lock user account during user registration |
        | Internal Notification Management  | SelfRegistration.Notification.InternallyManage  | Set false if the client application handles notification sending |
        | Enable reCaptcha  | SelfRegistration.ReCaptcha  | Enable captcha verification during self registration |
        | User self registration verification link expiry time  | SelfRegistration.VerificationCode.ExpiryTime  | Set the number of minutes the user self registration verification mail would be valid |
        | User self registration SMS OTP expiry time  | SelfRegistration.VerificationCode.SMSOTP.ExpiryTime  | Set the number of minutes that the SMS OTP would be valid |
        | User self registration callback URL regex  | SelfRegistration.CallbackRegex  | User self registration callback URL regex |
        | Manage Self-Sign-Up purposes  | _url_listPurposeSelfSignUp  | Click here to manage Self-Sign-Up purposes |
      * User Onboarding
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable User Email Verification  | EmailVerification.Enable  | Enable to trigger a verification notification during user creation |
        | Enable Account Lock On Creation  | EmailVerification.LockOnCreation  | Lock user account during user creation |
        | Internal Notification Management  | EmailVerification.Notification.InternallyManage  | Set false if the client application handles notification sending |
        | Email verification code expiry time  | EmailVerification.ExpiryTime  | Set the number of minutes the email verification mail would be valid.(Negative value for infinite validity) |
        | Ask password code expiry time  | EmailVerification.AskPassword.ExpiryTime  | Set the number of minutes the ask password mail would be valid. (Negative value for infinite validity) |
        | Temporary password generation extension class  | EmailVerification.AskPassword.PasswordGenerator  | Temporary password generation extension point in ask password feature) |
        | Manage Just In Time Provisioning purposes  | _url_listPurposeJITProvisioning  | Click here to manage JIT purposes |
      * Account Management Policies
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Enable Password Reset via Recovery Email |  Recovery.AdminPasswordReset.RecoveryLink | User gets notified with a link to reset password |
        | Enable Password Reset via OTP  | Recovery.AdminPasswordReset.OTP  | User gets notified with a one time password to try with SSO login |
        | Enable Password Reset Offline  | Recovery.AdminPasswordReset.Offline  | An OTP generated and stored in users claims |

    <br>
    **Consent Management**
      * Consent Management
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Controller Name | piiController | Name of the first Controller who collects the data |
        | Contact Name | contact | Contact name of the Controller |
        | Email Address | email | Contact email address of the Controller |
        | Phone Number | phone | Contact phone number of the Controller |
        | On Behalf | onBehalf | A user information (PII) Processor acting on behalf of a Controller or PII Processor |
        | Url | piiControllerUrl | A URL for contacting the Controller |
        | Country | addressCountry | Country of the Controller |
        | Locality | addressLocality | Locality of the Controller |
        | Region | addressRegion | Region of the Controller |
        | Post Office Box Number | postOfficeBoxNumber | Post Office Box Number of the Controller |
        | Postal Code | postalCode | Postal Code of the Controller |
        | Street Address | streetAddress | Street Address of the Controller |

    <br>
    **Analytics Engine**
      * Analytics Engine Configuration
        | Property display name | Property name | Purpose |
        | ------- | -------|---|
        | Target Host | adaptive_authentication.analytics.receiver | Target Host |
        | Enable Basic Authentication | adaptive_authentication.analytics.basicAuth.enabled | Enable Basic Authentication |
        | User ID | adaptive_authentication.analytics.basicAuth.username | Target Host Secured User ID |
        | Secret | __secret__adaptive_authentication.analytics.basicAuth.password | Target Host Secured Secret |
        | HTTP Connection Timeout | adaptive_authentication.analytics.HTTPConnectionTimeou | HTTP Connection Timeout in milliseconds |
        | HTTP Read Timeout | adaptive_authentication.analytics.HTTPReadTimeout | HTTP Read Timeout in milliseconds |
        | HTTP Connection Request Timeout | adaptive_authentication.analytics.HTTPConnectionRequestTimeout | HTTP Connection Request Timeout in milliseconds |
        | Hostname verification | adaptive_authentication.analytics.hostnameVerfier | Hostname verification. (STRICT, ALLOW_ALL) |

    The APIs mentioned below can be used to retrieve the above mentioned categories, connectors of the categories and properies of the categories and update the property values.

  version: "v1"
  title: WSO2 Identity Server - Governance connectors Admin API
  contact:
    name: WSO2 Identity Server
    url: 'https://wso2.com/identity-and-access-management'
    email: architecture@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Management
    description: Secured Admin-only calls
security:
  - OAuth2: []
  - BasicAuth: []
paths:
  /identity-governance/:
    get:
      tags:
        - Management
      summary: Retrieve governance connector categories.
      operationId: getCategories
      description: |
        Retrieve governance connector categories.

        <b>Permission required:</b>
          * /permission/admin/manage
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/sortQueryParam'
      responses:
        '200':
          description: Governance connector categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoriesRes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
  '/identity-governance/{category-id}':
    get:
      tags:
        - Management
      summary: Retrieve governance connectors of a category.
      operationId: getConnectorCategory
      description: |
        Retrieve governance connectors of a category.

        <b>Permission required:</b>
          * /permission/admin/manage
      parameters:
        - $ref: '#/components/parameters/categoryIdPathParam'
      responses:
        '200':
          description: Requested governance connector category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryRes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/identity-governance/{category-id}/connectors':
    get:
      tags:
        - Management
      summary: Retrieve governance connectors of a category.
      operationId: getConnectorsOfCategory
      description: |
        Retrieve governance connectors of a category.

        <b>Permission required:</b>
          * /permission/admin/manage
      parameters:
        - $ref: '#/components/parameters/categoryIdPathParam'
      responses:
        '200':
          description: Requested governance connector category.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorRes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/identity-governance/{category-id}/connectors/{connector-id}':
    get:
      tags:
        - Management
      summary: Retrieve governance connector.
      operationId: getConnector
      description: |
        Retrieve governance connector.

        <b>Permission required:</b>
          * /permission/admin/manage
      parameters:
        - $ref: '#/components/parameters/categoryIdPathParam'
        - $ref: '#/components/parameters/connectorIdPathParam'
      responses:
        '200':
          description: Requested governance connector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorRes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Management
      summary: Patch governance connector.
      operationId: patchConnector
      description: |
        Patch governance connector.

        <b>Permission required:</b>
          * /permission/admin/manage
      parameters:
        - $ref: '#/components/parameters/categoryIdPathParam'
        - $ref: '#/components/parameters/connectorIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorsPatchReq'
        description: governance-connector to update
servers:
  - url: https://localhost:9443/t/{tenant-domain}/api/server/v1/
components:
  parameters:
    limitQueryParam:
      in: query
      name: limit
      required: false
      description: maximum number of records to return
      schema:
        type: integer
        format: int32
    offsetQueryParam:
      in: query
      name: offset
      required: false
      description: number of records to skip for pagination
      schema:
        type: integer
        format: int32
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: Condition to filter the retrival of records.
      schema:
        type: string
    sortQueryParam:
      in: query
      name: sort
      required: false
      description: Define the order how the retrieved records should be sorted.
      schema:
        type: string
    categoryIdPathParam:
      in: path
      name: category-id
      required: true
      description: Id of the connector category.
      schema:
        type: string
    connectorIdPathParam:
      in: path
      name: connector-id
      required: true
      description: Id of the connector.
      schema:
        type: string
  responses:
    Unauthorized:
      description: Unauthorized.
    ServerError:
      description: Internal Server Error.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not Implemented.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInput:
      description: Bad Request.
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    OK:
      description: OK.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth/authorize'
          tokenUrl: 'https://localhost:9443/oauth/token'
          scopes: {}
  schemas:
    CategoriesRes:
      type: object
      description: Governance connector category response.
      properties:
        id:
          type: string
          description: Connector category id.
          example: QWNjb3VudCBNYW5hZ2VtZW50IFBvbGljaWVz
        name:
          type: string
          description: Connector category name.
          example: Account Management Policies
        self:
          type: string
          description: Path to retrieve the full connector information.
          example: /t/carbon.super/api/server/v1/identity-governance/QWNjb3VudCBNYW5hZ2VtZW50IFBvbGljaWVz
        connectors:
          type: array
          description: Connectors of the category with minimal attributes.
          items:
            $ref: '#/components/schemas/CategoryConnectorsRes'
    CategoryConnectorsRes:
      type: object
      description: Governance connector response with minimal attributes.
      properties:
        id:
          type: string
          description: Connector id.
          example: c3VzcGVuc2lvbi5ub3RpZmljYXRpb24
        self:
          type: string
          description: Path to retrieve the full connector information.
          example: /t/carbon.super/api/server/v1/identity-governance/QWNjb3VudCBNYW5hZ2VtZW50IFBvbGljaWVz/connectors/c3VzcGVuc2lvbi5ub3RpZmljYXRpb24
    CategoryRes:
      type: object
      description: Governance connector category response.
      properties:
        name:
          type: string
          description: Connector category name.
          example: Account Management Policies
        connectors:
          type: array
          description: Connectors of the category with minimal attributes.
          items:
            $ref: '#/components/schemas/ConnectorRes'
    ConnectorRes:
      type: object
      description: Governance connector response.
      properties:
        id:
          type: string
          description: Connector id.
          example: c3VzcGVuc2lvbi5ub3RpZmljYXRpb24
        name:
          type: string
          description: Connector name.
          example: suspension.notification
        category:
          type: string
          description: Connector category.
          example: Account Management Policies
        friendlyName:
          type: string
          description: Connector friendly name.
          example: Lock Idle Accounts
        order:
          type: integer
          description: Connector order.
          example: 0
        subCategory:
          type: string
          description: Connector subcategory.
          example: DEFAULT
        properties:
          type: array
          description: Define any additional properties if required.
          items:
            $ref: '#/components/schemas/PropertyRes'
    PropertyRes:
      type: object
      description: Governance connector property.
      properties:
        name:
          type: string
          description: Property name.
          example: suspension.notification.enable
        value:
          type: string
          description: Property value.
          example: 'false'
        displayName:
          type: string
          description: Property display name.
          example: Enable
        description:
          type: string
          description: Property description.
          example: Enable account suspend notifications.
    ConnectorsPatchReq:
      type: object
      description: Governance connector property patch request.
      required:
        - operation
        - properties
      properties:
        operation:
          type: string
          description: Governance connector properties patch operation.
          enum:
            - UPDATE
          example: UPDATE
        properties:
          type: array
          description: Governance connector properties to patch.
          items:
            $ref: '#/components/schemas/PropertyReq'
    PropertyReq:
      type: object
      description: Governance connector property to patch.
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Property name.
          example: suspension.notification.enable
        value:
          type: string
          description: Property value.
          example: 'false'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: AAA-00000
        message:
          type: string
          example: Some Error Message
        description:
          type: string
          example: Some Error Description
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047
